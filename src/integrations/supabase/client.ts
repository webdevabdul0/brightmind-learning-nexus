// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Custom type declarations for our database tables (independent of the auto-generated types)
export type Profile = {
  id: string;
  name: string | null;
  email: string | null;
  avatar_url: string | null;
  role: 'student' | 'teacher' | 'admin';
  roll_number: string | null;
  school: string | null;
  grade: string | null;
  phone: string | null;
  address: string | null;
  bio: string | null;
  updated_at: string | null;
}

export type Course = {
  id: string;
  title: string;
  description: string;
  instructor_id: string | null;
  category: string;
  image_url: string | null;
  duration: string | null;
  level: string | null;
  price: number | null;
  created_at: string | null;
  updated_at: string | null;
}

export type Enrollment = {
  id: string;
  student_id: string;
  course_id: string;
  progress: number | null;
  enrolled_at: string | null;
  completed_at: string | null;
}

export type Assignment = {
  id: string;
  title: string;
  description: string | null;
  course_id: string;
  due_date: string | null;
  points: number | null;
  created_at: string | null;
}

export type LiveClass = {
  id: string;
  course_id: string;
  title: string;
  description: string | null;
  instructor_id: string;
  start_time: string;
  duration: number;
  meeting_link: string | null;
  created_at: string | null;
}

export type Notification = {
  id: string;
  user_id: string;
  title: string;
  message: string;
  type: string;
  read: boolean | null;
  created_at: string | null;
}

export type UserSettings = {
  id: string;
  theme: string | null;
  email_notifications: boolean | null;
  browser_notifications: boolean | null;
  language: string | null;
  updated_at: string | null;
}

export type AIConversation = {
  id: string;
  user_id: string;
  message: string;
  response: string;
  created_at: string | null;
}

export * from './types';

/**
 * Send notifications to a list of users
 * @param userIds array of user ids
 * @param title notification title
 * @param message notification message
 * @param type notification type (e.g. 'course', 'assignment', 'live_class', 'submission')
 * @param link optional link to relevant page
 */
export async function sendNotifications(userIds: string[], title: string, message: string, type: string, link?: string) {
  if (!userIds.length) return;
  const notifications = userIds.map(user_id => ({
    user_id,
    title,
    message,
    type,
    link: link || null,
    read: false
  }));
  const { error } = await supabase.from('notifications').insert(notifications);
  if (error) {
    // Optionally handle/log error
    console.error('Failed to send notifications:', error.message);
  }
}
